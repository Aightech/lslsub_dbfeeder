.TH "lsl::stream_info" 3 "Fri May 10 2019" "lslsub_dbfeeder" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsl::stream_info
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <lsl_cpp\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstream_info\fP (const std::string &\fBname\fP, const std::string &\fBtype\fP, int32_t \fBchannel_count\fP=1, double \fBnominal_srate\fP=\fBIRREGULAR_RATE\fP, \fBchannel_format_t\fP \fBchannel_format\fP=\fBcf_float32\fP, const std::string &\fBsource_id\fP=std::string())"
.br
.ti -1c
.RI "\fBstream_info\fP (\fBlsl_streaminfo\fP \fBhandle\fP)"
.br
.ti -1c
.RI "std::string \fBname\fP () const"
.br
.ti -1c
.RI "std::string \fBtype\fP () const"
.br
.ti -1c
.RI "int32_t \fBchannel_count\fP () const"
.br
.ti -1c
.RI "double \fBnominal_srate\fP () const"
.br
.ti -1c
.RI "\fBchannel_format_t\fP \fBchannel_format\fP () const"
.br
.ti -1c
.RI "std::string \fBsource_id\fP () const"
.br
.ti -1c
.RI "int32_t \fBversion\fP () const"
.br
.ti -1c
.RI "double \fBcreated_at\fP () const"
.br
.ti -1c
.RI "std::string \fBuid\fP () const"
.br
.ti -1c
.RI "std::string \fBsession_id\fP () const"
.br
.ti -1c
.RI "std::string \fBhostname\fP () const"
.br
.ti -1c
.RI "\fBxml_element\fP \fBdesc\fP ()"
.br
.ti -1c
.RI "bool \fBmatches_query\fP (const char *query) const"
.br
.ti -1c
.RI "std::string \fBas_xml\fP () const"
.br
.ti -1c
.RI "int32_t \fBchannel_bytes\fP () const"
.br
.RI "Number of bytes occupied by a channel (0 for string-typed channels)\&. "
.ti -1c
.RI "int32_t \fBsample_bytes\fP () const"
.br
.RI "Number of bytes occupied by a sample (0 for string-typed channels)\&. "
.ti -1c
.RI "\fBlsl_streaminfo\fP \fBhandle\fP () const"
.br
.RI "Get the implementation handle\&. "
.ti -1c
.RI "\fBstream_info\fP ()"
.br
.RI "Default contructor\&. "
.ti -1c
.RI "\fBstream_info\fP (const \fBstream_info\fP &rhs)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBstream_info\fP & \fBoperator=\fP (const \fBstream_info\fP &rhs)"
.br
.RI "Assignment operator\&. "
.ti -1c
.RI "\fB~stream_info\fP ()"
.br
.RI "Destructor\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBstream_info\fP \fBfrom_xml\fP (const std::string &xml)"
.br
.RI "Utility function to create a \fBstream_info\fP from an XML representation\&. "
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "lsl::stream_info::stream_info (const std::string & name, const std::string & type, int32_t channel_count = \fC1\fP, double nominal_srate = \fC\fBIRREGULAR_RATE\fP\fP, \fBchannel_format_t\fP channel_format = \fC\fBcf_float32\fP\fP, const std::string & source_id = \fCstd::string()\fP)\fC [inline]\fP"
Construct a new \fBstream_info\fP object\&. Core stream information is specified here\&. Any remaining meta-data can be added later\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of the stream\&. Describes the device (or product series) that this stream makes available (for use by programs, experimenters or data analysts)\&. Cannot be empty\&. 
.br
\fItype\fP Content type of the stream\&. Please see https://github.com/sccn/xdf/wiki/Meta-Data (or web search for: XDF meta-data) for pre-defined content-type names, but you can also make up your own\&. The content type is the preferred way to find streams (as opposed to searching by name)\&. 
.br
\fIchannel_count\fP Number of channels per sample\&. This stays constant for the lifetime of the stream\&. 
.br
\fInominal_srate\fP The sampling rate (in Hz) as advertised by the data source, if regular (otherwise set to IRREGULAR_RATE)\&. 
.br
\fIchannel_format\fP Format/type of each channel\&. If your channels have different formats, consider supplying multiple streams or use the largest type that can hold them all (such as cf_double64)\&. 
.br
\fIsource_id\fP Unique identifier of the device or source of the data, if available (such as the serial number)\&. This is critical for system robustness since it allows recipients to recover from failure even after the serving app, device or computer crashes (just by finding a stream with the same source id on the network again)\&. Therefore, it is highly recommended to always try to provide whatever information can uniquely identify the data source itself\&. 
.RE
.PP

.SS "lsl::stream_info::stream_info (\fBlsl_streaminfo\fP handle)\fC [inline]\fP"

.SS "lsl::stream_info::stream_info ()\fC [inline]\fP"

.PP
Default contructor\&. 
.SS "lsl::stream_info::stream_info (const \fBstream_info\fP & rhs)\fC [inline]\fP"

.PP
Copy constructor\&. 
.SS "lsl::stream_info::~stream_info ()\fC [inline]\fP"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::string lsl::stream_info::as_xml () const\fC [inline]\fP"
Retrieve the entire \fBstream_info\fP in XML format\&. This yields an XML document (in string form) whose top-level element is <info>\&. The info element contains one element for each field of the \fBstream_info\fP class, including: a) the core elements <name>, <type>, <channel_count>, <nominal_srate>, <channel_format>, <source_id> b) the misc elements <version>, <created_at>, <uid>, <session_id>, <v4address>, <v4data_port>, <v4service_port>, <v6address>, <v6data_port>, <v6service_port> c) the extended description element <desc> with user-defined sub-elements\&. 
.SS "int32_t lsl::stream_info::channel_bytes () const\fC [inline]\fP"

.PP
Number of bytes occupied by a channel (0 for string-typed channels)\&. 
.SS "int32_t lsl::stream_info::channel_count () const\fC [inline]\fP"
Number of channels of the stream\&. A stream has at least one channel; the channel count stays constant for all samples\&. 
.SS "\fBchannel_format_t\fP lsl::stream_info::channel_format () const\fC [inline]\fP"
Channel format of the stream\&. All channels in a stream have the same format\&. However, a device might offer multiple time-synched streams each with its own format\&. 
.SS "double lsl::stream_info::created_at () const\fC [inline]\fP"
Creation time stamp of the stream\&. This is the time stamp when the stream was first created (as determined via \fBlocal_clock()\fP on the providing machine)\&. 
.SS "\fBxml_element\fP lsl::stream_info::desc ()\fC [inline]\fP"
Extended description of the stream\&. It is highly recommended that at least the channel labels are described here\&. See code examples on the LSL wiki\&. Other information, such as amplifier settings, measurement units if deviating from defaults, setup information, subject information, etc\&., can be specified here, as well\&. Meta-data recommendations follow the XDF file format project (github\&.com/sccn/xdf/wiki/Meta-Data or web search for: XDF meta-data)\&.
.PP
Important: if you use a stream content type for which meta-data recommendations exist, please try to lay out your meta-data in agreement with these recommendations for compatibility with other applications\&. 
.SS "static \fBstream_info\fP lsl::stream_info::from_xml (const std::string & xml)\fC [inline]\fP, \fC [static]\fP"

.PP
Utility function to create a \fBstream_info\fP from an XML representation\&. 
.SS "\fBlsl_streaminfo\fP lsl::stream_info::handle () const\fC [inline]\fP"

.PP
Get the implementation handle\&. 
.SS "std::string lsl::stream_info::hostname () const\fC [inline]\fP"
Hostname of the providing machine\&. 
.SS "bool lsl::stream_info::matches_query (const char * query) const\fC [inline]\fP"

.PP
Tries to match the stream info XML element \fCinfo\fP against an \fCXPath\fP query\&.
.PP
Example query strings: 
.PP
.nf
channel_count>5 and type='EEG'
type='TestStream' or contains(name,'Brain')
name='ExampleStream'

.fi
.PP
 
.SS "std::string lsl::stream_info::name () const\fC [inline]\fP"
Name of the stream\&. This is a human-readable name\&. For streams offered by device modules, it refers to the type of device or product series that is generating the data of the stream\&. If the source is an application, the name may be a more generic or specific identifier\&. Multiple streams with the same name can coexist, though potentially at the cost of ambiguity (for the recording app or experimenter)\&. 
.SS "double lsl::stream_info::nominal_srate () const\fC [inline]\fP"
Sampling rate of the stream, according to the source (in Hz)\&. If a stream is irregularly sampled, this should be set to IRREGULAR_RATE\&.
.PP
Note that no data will be lost even if this sampling rate is incorrect or if a device has temporary hiccups, since all samples will be recorded anyway (except for those dropped by the device itself)\&. However, when the recording is imported into an application, a good importer may correct such errors more accurately if the advertised sampling rate was close to the specs of the device\&. 
.SS "\fBstream_info\fP& lsl::stream_info::operator= (const \fBstream_info\fP & rhs)\fC [inline]\fP"

.PP
Assignment operator\&. 
.SS "int32_t lsl::stream_info::sample_bytes () const\fC [inline]\fP"

.PP
Number of bytes occupied by a sample (0 for string-typed channels)\&. 
.SS "std::string lsl::stream_info::session_id () const\fC [inline]\fP"
Session ID for the given stream\&. The session id is an optional human-assigned identifier of the recording session\&. While it is rarely used, it can be used to prevent concurrent recording activitites on the same sub-network (e\&.g\&., in multiple experiment areas) from seeing each other's streams (assigned via a configuration file by the experimenter, see Network Connectivity in the LSL wiki)\&. 
.SS "std::string lsl::stream_info::source_id () const\fC [inline]\fP"
Unique identifier of the stream's source, if available\&. The unique source (or device) identifier is an optional piece of information that, if available, allows that endpoints (such as the recording program) can re-acquire a stream automatically once it is back online\&. 
.SS "std::string lsl::stream_info::type () const\fC [inline]\fP"
Content type of the stream\&. The content type is a short string such as 'EEG', 'Gaze' which describes the content carried by the channel (if known)\&. If a stream contains mixed content this value need not be assigned but may instead be stored in the description of channel types\&. To be useful to applications and automated processing systems using the recommended content types is preferred\&. Content types usually follow those pre-defined in https://github.com/sccn/xdf/wiki/Meta-Data (or web search for: XDF meta-data)\&. 
.SS "std::string lsl::stream_info::uid () const\fC [inline]\fP"
Unique ID of the stream outlet instance (once assigned)\&. This is a unique identifier of the stream outlet, and is guaranteed to be different across multiple instantiations of the same outlet (e\&.g\&., after a re-start)\&. 
.SS "int32_t lsl::stream_info::version () const\fC [inline]\fP"
Protocol version used to deliver the stream\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for lslsub_dbfeeder from the source code\&.
